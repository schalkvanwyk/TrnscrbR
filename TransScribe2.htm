<html>
<head>
    <title>Trnscrbr - A Transcribe Viewer</title>
    <style>
        body main {
            display: grid;
            grid-template-columns: 2fr 1fr;
            grid-auto-rows: 72px;
        }

        section.transcript {
            grid-column: 1 / 3;
            grid-row: 1 / 12;
            column-width: 70%;
        }

        section.aside.audio {
            grid-column: 3 / 3;
            grid-row: 1;
        }

        section.aside.info {
            grid-column: 3 / 3;
            grid-row: 5;
        }

        div.raw {
            height: 20%;
            overflow: auto;
        }

        div.segmented {
            height: 60%;
            overflow-wrap: break-word;
            overflow-x: auto;
            overflow-y: auto;
        }

        div.segmented p {
            background-color: coral;
        }

        div.segmented p span.segmentLabel {
            background-color: lightgray;
        }

        div.segmented p span.dialogue {
            -webkit-filter: blur(1.2px);
            filter: blur(1.2px);
            transition: all 0.2s ease;
        }

        div.segmented p span.punctuation {
            -webkit-filter: blur(0.8px);
            filter: blur(0.8px);
        }

        div.segmented p span.speaking {
            background-color: yellow;
            -webkit-filter: blur(0px);
            filter:blur(0px);
        }
        div.segmented p span.spoke {
            background-color: lightyellow;
            -webkit-filter: blur(0.5px);
            filter: blur(0.5px);
        }
    </style>
</head>
<header>
    <h1>Transcription Viewer</h1>
    <hr />
</header>
<body>
    <main>
        <section id="transcriptSection" class="transcript">
            <h1>Transcript</h1>
            <hr />
            <span>
                <label for="transcriptFileSource">Load the transcript file</label>
                <input id="transcriptFileSource" name="transcriptFileSource" class="file-input" type="file" accept=".json, text/json" />
            </span>
            <span>
                <button id="clearTranscripts" onclick="handleClearTranscripts(event)">Clear</button>
            </span>
            <span id="transcriptFileName" class="file-name">No File</span>
            <hr />
            <div class="workspaceContainer">
                <div id="segmentedTranscriptContainer" class="segmented"></div>
            </div>
            <!-- <div id="scrollOutput"></div> -->
            <hr />
            <details>
                <summary>Full transcript</summary>
                <div id="rawTranscriptContainer" class="raw"></div>
            </details>
        </section>
        <section id="audioSection" class="audio aside">
            <h1>Audio</h1>
            <hr />
            <figure id="audioContainer">
                <figcaption>Audio file being transcribed</figcaption>
                <audio id="audioPlayer" width="250px" controls
                        ontimeupdate="handleAudioTimeUpdated(event)" 
                        onplay="handleAudioPlay(event)" 
                        onended="handleAudioEnded(event)" 
                        onseeked="handleAudioSeeked(event)">
                    Your browser does not support the <code>audio</code> element.
                </audio>
                <div style="overflow-wrap: break-word;">
                    <label for="audioFileSource">Load the audio file</label>
                    <input id="audioFileSource" class="file-input" type="file" name="audioFileSource" />
                </div>
            </figure>
            <div id="audioFileName" class="file-name">No File</div>
            <hr />
        </section>
        <section id="transcriptInfo" class="info aside">
            <details class="info aside">
                <summary>Transcript Information</summary>
                <hr />
                <div id="infoTranscriptContainer" class="info"></div>
            </details>
            <hr />
            <aside id="speakersContainer" class="speakers aside">
                <summary>Speakers</summary>
                <ul>
                </ul>
            </aside>
        </section>
    </main>
</body>

<script type="text/javascript" defer>
    //https://www.wintellect.com/data-binding-pure-javascript/
    function Binding(b) {
        _this = this
        this.elementBindings = []
        this.value = b.object[b.property]
        this.valueGetter = function(){
            return _this.value;
        }
        this.valueSetter = function(val){
            _this.value = val
            for (var i = 0; i < _this.elementBindings.length; i++) {
                var binding=_this.elementBindings[i]
                binding.element[binding.attribute] = val
            }
        }
        this.addBinding = function(element, attribute, event){
            var binding = {
                element: element,
                attribute: attribute
            }
            if (event){
                element.addEventListener(event, function(event){
                    _this.valueSetter(element[attribute]);
                })
                binding.event = event
            }       
            this.elementBindings.push(binding)
            element[attribute] = _this.value
            return _this
        }

        Object.defineProperty(b.object, b.property, {
            get: this.valueGetter,
            set: this.valueSetter
        }); 

        b.object[b.property] = this.value;
    }

    //https://www.wintellect.com/how-to-implement-the-observer-pattern-with-objects-and-arrays-in-pure-javascript/
    function Observer(o, property) {
        var _this = this;
        var value = o[property];
        this.observers = [];
        
        this.Observe = function (notifyCallback){
            _this.observers.push(notifyCallback);
        }

        Object.defineProperty(o, property, {
            set: function(val){
                _this.value = val;
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](val);
            },
            get: function(){
                return _this.value;
            }
        });
    }
    function ArrayObserver(a) {
        var _this = this;
        this.array = a;   
        this.observers = [];

        this.Observe = function (notifyCallback){
            _this.observers.push(notifyCallback);
        }    

        a.push = function(obj){
            var push = Array.prototype.push.apply(a, arguments);        
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "push");
            return push;
        }

        a.pop = function(){
            var popped = Array.prototype.pop.apply(a, arguments);        
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](popped, "pop");
            return popped;
        }

        a.reverse = function() {
            var result = Array.prototype.reverse.apply(a, arguments);
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](result, "reverse");
            return result;
        };

        a.shift = function() {
            var deleted_item = Array.prototype.shift.apply(a, arguments);
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](deleted_item, "shift");
            return deleted_item;                        
        };

        a.sort = function() {
            var result = Array.prototype.sort.apply(a, arguments);
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](result, "sort");
            return result;
        };

        a.splice = function(i, length, itemsToInsert) {
            var returnObj
            if(itemsToInsert){
                Array.prototype.slice.call(arguments, 2);
                returnObj = itemsToInsert;
            }
            else{
                returnObj = Array.prototype.splice.apply(a, arguments);
            }
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](returnObj, "splice");
            return returnObj;
        };

        a.unshift = function() {
            var new_length = Array.prototype.unshift.apply(a, arguments);
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](new_length, "unshift");
            return arguments;
        };
                    
    }
    function MapObserver(m) {
        var _this = this;
        this.map = m;
        this.observers = [];

        this.Observe = function (notifyCallback){
            _this.observers.push(notifyCallback);
        }

        m.set = function(obj){
            var set = Map.prototype.set.apply(m, arguments);        
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "set");
            return set;
        }

        m.clear = function(obj){
            var clear = Map.prototype.clear.apply(m);        
            for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "clear");
            return clear;
        }
    }

    function secondsToTime(seconds){
        // let hr  = Math.floor(seconds / 3600);
        let sec = Math.floor(seconds);
        sec = Math.floor( sec % 60 );
        sec = sec >= 10 ? sec : '0' + sec;

        let min = Math.floor(seconds / 60);
        min = min >= 10 ? min : '0' + min;

        return min + ":" + sec;
    }
</script>

<script type="text/javascript" defer>
    document.getElementById('audioFileSource').addEventListener('change', handleAudioFileSelect, false);
    document.getElementById('transcriptFileSource').addEventListener('change', handleJsonFileSelect, false);
    // document.getElementById('audioPlayer').addEventListener('play', handlePlay, false);

    const nbsp = document.createTextNode("\u00A0");

    const audio = document.getElementById('audioPlayer');
    // audio.muted = true;

    var transcriptData;
    var speakersList = document.querySelector('#speakersContainer>ul');
    var speakers = new Map();
    // var speakersObserver = new ArrayObserver(Array.from(speakers, (v, k) => k));
    var speakersObserver = new MapObserver(speakers);
    speakersObserver.Observe(function(result, method){
        switch (method) {
            case 'set':
                let speakersListItem = speakersList.querySelector(`#${result}`);
                if(!speakersListItem) {
                    let speakerElement = speakersList.appendChild(document.createElement('li'));
                    speakerElement.id = result;
                    speakerElement.innerText = result;
                }
                break;
            case 'clear':
                speakersList.innerHTML = '';
                break;
            default:
                break;
        }
    });
    var startTimes;
    var lastStartTime;
    var currentDialogue;
    var previousDialogue;

    const transcriptInfo = document.getElementById('infoTranscriptContainer');
    const transcriptWrapper = document.getElementById('segmentedTranscriptContainer');
    transcriptWrapper.addEventListener('speaking', handleSpeaking, false);
    const transcriptWrapperOffSetTop = transcriptWrapper.offsetTop;
    // transcriptWrapper.addEventListener("scroll", event => scrollOutput.textContent = `scrollTop: ${transcriptWrapper.scrollTop}`);

    function handleAudioFileSelect(evt) {
        var files = evt.target.files;

        for (var i = 0, f; f = files[i]; i++) {

            // Only process audio files.
            if (!f.type.match('audio.*')) {
                alert('Must be an audio file');
                return;
            };

            // Warn user if file size is larger than 50mb
            fileSize = Math.round(files[0].size / 1000000)
            if (fileSize > 50.457280) {
                alert('This audio file is ' + fileSize + 'mb. There may be playback issues above 50mb. For ways to reduce file size see the docs: https://github.com/smlum/scription#uploading-large-audio-files-to-scription');
                // TODO use Bulma modal instead of alert
                // $('.modal-audio-size'){}
                // return;
            }

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    document.getElementById('audioPlayer').src = e.target.result;
                    console.log("loading audio: " + theFile.name);
                    document.getElementById('audioFileName').innerHTML = theFile.name;
                };
            })(f);

            reader.readAsDataURL(f);
        }
    }

    function handleJsonFileSelect(evt) {
        const files = evt.target.files;
        for (let i = 0, f; f = files[i]; i++) {
            let reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    console.log(`loading json: ${theFile.name}`);

                    let transcriptFileName = document.getElementById('transcriptFileName');
                    if(transcriptFileName.firstChild?.nodeType === transcriptFileName.TEXT_NODE) transcriptFileName.removeChild(transcriptFileName.firstChild);
                    transcriptFileName.appendChild(document.createElement('li')).textContent = theFile.name;
                    
                    transcriptData = JSON.parse(e.target.result);
                    
                    displayTranscriptResults(transcriptData.results);

                    startTimes = transcriptData.results.items.filter(o => o.type !== 'punctuation').map(o => Number(o.start_time));
                };
            })(f);

            reader.readAsText(f);
        }
    }
    
    function displayTranscriptResults(transcriptResults) {
        const speakerLabels = transcriptResults.speaker_labels;
        
        populateTranscriptInfo(transcriptInfo, transcriptData.jobName, transcriptResults, speakerLabels);

        populateRawTranscripts(transcriptResults.transcripts);

        const items = buildTranscriptItems(transcriptResults.items);

        populateTranscriptSegments(speakerLabels.segments, speakers, items);
    }

    function populateTranscriptInfo(infoContainer, jobName, transcriptResults, speakerLabels) {
        infoContainer.appendChild(document.createElement('li')).textContent = `Job Name: ${jobName}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Language: ${transcriptResults.language_code}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Languages detected: ${transcriptResults.language_identification.map(o => `${o.code} (${o.score})`).join(' ')}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Number of speakers: ${speakerLabels.speakers}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Number of segments: ${speakerLabels.segments.length}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Estimated number of words: ${transcriptResults.items.filter(o => o.type !== 'punctuation').length}`;
    }

    function populateRawTranscripts(transcripts) {
        const rawTranscriptContainer = document.getElementById('rawTranscriptContainer');
        transcripts.forEach(transcriptItem => {
            rawTranscriptContainer.appendChild(document.createElement('p')).textContent = transcriptItem.transcript;
        });
    }

    function buildTranscriptItems(transcriptItems) {
        var lastEndTime;
        var lastStartTime;

        return transcriptItems.map(item => {
            let startTime = item.start_time ? Math.round(lastStartTime = item.start_time * 1000) : lastStartTime;
            let endTime = item.end_time ? Math.round(lastEndTime = item.end_time * 1000) : lastEndTime;

            let itemContainer = document.createElement('span');
            if(item.type !== 'punctuation') {
                itemContainer.id = 'segment_item_' + startTime;
                itemContainer.dataset.duration_ms = Math.round(endTime - startTime);
                itemContainer.classList.add('dialogue');
            }
            itemContainer.dataset.type = item.type;
            itemContainer.dataset.start_time = startTime;
            itemContainer.dataset.end_time = endTime;
            itemContainer.dataset.confidence = item.alternatives[0].confidence;
            itemContainer.innerText = item.alternatives[0].content;
            itemContainer.onclick = handleWordSelected;

            return itemContainer;
        });
    }

    function populateTranscriptSegments(transcriptSegments, transcriptSpeakers, transcriptItems) {
        const segmentsContainer = document.getElementById('segmentedTranscriptContainer');

        transcriptSegments.forEach((segment, index) => {
            if(!transcriptSpeakers.has(segment.speaker_label)){
                transcriptSpeakers.set(segment.speaker_label, [segment]);
            } else {
                let speakerSegments = transcriptSpeakers.get(segment.speaker_label);
                speakerSegments.push(segment);
                transcriptSpeakers.set(segment.speaker_label, speakerSegments);
            }

            let segmentStartTime = Math.round(segment.start_time * 1000);
            let segmentEndTime = Math.round(segment.end_time * 1000);

            let segmentContainer = document.createElement('p');

            let segmentLabel = segmentContainer.appendChild(document.createElement('span'));
            segmentLabel.classList.add('segmentLabel');
            segmentLabel.textContent = `${segment.speaker_label} (${secondsToTime(segment.start_time)} - ${secondsToTime(segment.end_time)}): `;
            segmentLabel.dataset.bind = `transcriptResults.speaker_labels.segments[${index}].speaker_label`;
            segmentLabel.onclick = handleSegmentLabelClick;
            
            let segmentItems = transcriptItems.filter(item => item.dataset.start_time >= segmentStartTime && item.dataset.end_time <= segmentEndTime);
            segmentItems.forEach(segmentItem => {
                if(segmentItem.dataset.type !== 'punctuation') segmentContainer.appendChild(document.createTextNode(' '));
                else segmentItem.classList.add('punctuation');
                segmentContainer.appendChild(segmentItem);
            });

            segmentsContainer.appendChild(segmentContainer);
        });
    }

    function handleAudioPlay(e) {
        if(!transcriptData) {
            e.preventDefault();

            console.error("No transcript loaded! There are no transcript file loaded.");
            
            alert("No transcript loaded! Load a AWS transcript json file ");

            return e.returnValue = false;
        }
    }

    function handleAudioEnded(e) {
        previousDialogue?.classList.remove('speaking');
        previousDialogue?.classList.add('spoke');
        currentDialogue?.classList.remove('speaking');
        currentDialogue?.classList.add('spoke');
    }

    function handleAudioSeeked(e) {
        if(!transcriptData) return;

        transcriptWrapper.querySelectorAll('p>span').forEach(o => {
            o.classList.remove('speaking');
            o.classList.remove('spoke');
        });

        let currentTime = e.target.currentTime;
        let previousStartTime = currentTime;
        startTimes = transcriptData.results.items
            .filter(o => {
                let isNotPuctuation = o.type !== 'punctuation';
                let mustInclude = o.start_time >= currentTime;
                if(!mustInclude && isNotPuctuation) previousStartTime = Number(o.start_time);
                return mustInclude && isNotPuctuation;
            })
            .map(o => Number(o.start_time));
        if(previousStartTime === 0) {
            transcriptWrapper.scrollTop = 0;
            return;
        }
        else if(e.target.ended) return;

        if(previousStartTime < startTimes[0]) startTimes.unshift(previousStartTime);

        transcriptWrapper.dispatchEvent(new CustomEvent('speaking', { detail: currentTime }));
    }

    function handleAudioTimeUpdated(e) {
        if(!transcriptData || e.target.paused) return;

        transcriptWrapper.dispatchEvent(new CustomEvent('speaking', { detail: e.target.currentTime }));
    }

    function handleSpeaking(e) {
        let currentTime = Number(e.detail).toFixed(2);
        let startTime = Number(startTimes[0]).toFixed(2);

        // console.log(`${currentTime} | ${startTime}`);

        if(currentTime > startTime){
            lastStartTime = startTimes.shift();
            startTime = Number(startTimes[0]).toFixed(2);
            previousDialogue = currentDialogue;
        } 
        else return;

        if(lastStartTime > currentTime) return;

        currentDialogue = transcriptWrapper.querySelector(`p>span[id="segment_item_${Math.round(startTime * 1000)}"]`);
        if(currentDialogue) {
            currentDialogue.classList.add('speaking');
            previousDialogue?.classList.remove('speaking');
            previousDialogue?.classList.add('spoke');
            
            transcriptWrapper.scrollTop = currentDialogue.offsetTop - transcriptWrapperOffSetTop-60;
        }

        // console.log(`${lastStartTime} | ${startTime} (${Math.round(startTime * 1000)}) | ${currentDialogue?.textContent}`);
    }

    function handleClearTranscripts(e) {
        transcriptData = null;
        if(speakers) speakers.clear();
        startTimes = [];
        lastStartTime = null;
        currentDialogue = null;
        previousDialogue = null;
        document.getElementById('transcriptFileSource').value = null;
        document.getElementById('infoTranscriptContainer').innerHTML = "";
        document.getElementById('segmentedTranscriptContainer').innerHTML = "";
        document.getElementById('rawTranscriptContainer').innerHTML = "";
        document.querySelectorAll('#transcriptFileName>li').forEach(o => o.parentNode.removeChild(o));
    }

    function handleSegmentLabelClick(e) {
        alert(`Show Model: ${e.target.dataset.bind}`);
    }

    function handleWordSelected(e) {
        previousDialogue = null;
        lastStartTime = null;
        audio.currentTime = e.target.dataset.start_time/1000;
    }
    
</script>

</html>