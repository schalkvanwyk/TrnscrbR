<!DOCTYPE html>
<html class="no-js" lang="en">
<head>
    <meta charset="utf-8" />
    <!-- <meta http-equiv="x-ua-compatible" content="ie=edge" /> -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="AWS Transcription Viewer" />

    <title>Trnscrbr - A Transcription Viewer</title>

    <!-- Control the behavior of search engine crawling and indexing -->
    <meta name="robots" content="noindex,nofollow,nosnippet"><!-- All Search Engines -->
    <meta name="googlebot" content="noindex,nofollow,nosnippet"><!-- Google Specific -->

    <!-- Tells Google not to show the sitelinks search box -->
    <meta name="google" content="nositelinkssearchbox">

    <!-- Tells Google not to provide a translation for this document -->
    <meta name="google" content="notranslate">

    <script>
      // remove no-js and add 'js' to the HTML
      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    </script>
    
    <link rel="stylesheet" type="text/css" href="css/normalize.css" />
    <link rel="stylesheet" type="text/css" href="css/aria.disclosure.css" />
    <link rel="stylesheet" type="text/css" href="css/aria.disclosure.demo.css" />
    <link rel="stylesheet" type="text/css" href="css/simptip.css" media="screen,projection" />
    <!-- <link rel="stylesheet" type="text/css" href="css/mediacontrol.css" /> -->
    <link rel="stylesheet" type="text/css" href="css/main.css" />

    <meta name="theme-color" content="#fafafa" />

    <style>
        html {
            height: 100vh;
        }

        body main {
            display: grid;
            grid-template-columns: 2fr 1fr;
            grid-auto-rows: 62px;
            height: 100vh;
        }

        .Trnscrbr-ErrorContainer {
            height: 25px;
            width: 100%;
            display: block;
            float: inline-start;
            justify-content: center;
            align-items: center;
            vertical-align: middle;
            text-align: center;
            color: rgb(248, 184, 184);
            font-size: 1rem;
            background-color: rgb(149, 21, 21);
            opacity: 80%;
        }

        .toolButton {
            border: none;
            background-color: inherit;
            padding: 4px 4px;
            font-size: 14px;
            cursor: pointer;
            display: inline-block;
        }

        /* .file-input {

        } */

        section.transcript {
            grid-column: 1 / 3;
            grid-row: 1 / 12;
            column-width: 70vw;
            min-width: 385px;
        }

        section.transcript div.raw {
            height: 20vh;
            overflow: auto;
        }

        section.transcript div.segmented {
            height: 60vh;
            overflow-wrap: break-word;
            overflow-x: auto;
            overflow-y: auto;
        }

        section.transcript div.segmented p {
            line-height: 14px; /* within paragraph */
            margin: 2px; /* between paragraphs */
        }

        section.transcript div.segmented p div {
            display: inline-block;
        }

        /* section.transcript div.segmented p q {
            display: inline-block;
            min-width: 79%;
            background-color: cornsilk;
        } */

        section.transcript div.segmented p span.segmentLabel {
            color: azure;
            height: 22px;
            display: inline-block;
        }
        section.transcript div.segmented p span.dialogue {
            -webkit-filter: blur(1.2px);
            filter: blur(1.2px);
            transition: all 0.2s ease;
        }
        section.transcript div.segmented p span.punctuation {
            -webkit-filter: blur(0.8px);
            filter: blur(0.8px);
        }
        section.transcript div.segmented p span.speaking {
            background-color: yellow;
            -webkit-filter: blur(0px);
            filter:blur(0px);
        }
        section.transcript div.segmented p span.spoke {
            background-color: lightyellow;
            -webkit-filter: blur(0.5px);
            filter: blur(0.5px);
        }

        section.aside {
            grid-column: 3 / 3;
            max-width: 335px;
        }

        section.aside.mediaPlayer {
            grid-row: 1;
        }

        section.aside.info {
            grid-row: 7;
        }

        section.aside ul {
            margin: 0 0 0 5px;
            padding: 0;
        }

        section.aside ol {
            margin: 0 0 0 50px;
            padding: 0;
        }

        section.aside .speakers ul {
            color: azure;
            width: 98%;
            list-style-type: none;
        }

        section.aside .speakers input {
            color: azure;
            width: 98%;
            border: 0;
            opacity: 100%;
        }

        div.file-name {
            word-break: break-all;
            overflow-wrap: anywhere;
        }

        .speaker-1 {
            background-color: darkgoldenrod;
            opacity: 75%;
        }
        .speaker-2 {
            background-color: darkgreen;
            opacity: 75%;
        }
        .speaker-3 {
            background-color: darkblue;
            opacity: 75%;
        }
        .speaker-4 {
            background-color: darkcyan;
            opacity: 75%;
        }
        .speaker-5 {
            background-color: darksalmon;
            opacity: 75%;
        }
        .speaker-6 {
            background-color: darkslateblue;
            opacity: 75%;
        }
        .speaker-7 {
            background-color: darkolivegreen;
            opacity: 75%;
        }
        .speaker-8 {
            background-color: darkkhaki;
            opacity: 75%;
        }
        .speaker-9 {
            background-color: darkseagreen;
            opacity: 75%;
        }
    </style>

    <script type="text/javascript">
        // Whole-script strict mode syntax
        'use strict';

        //https://www.wintellect.com/data-binding-pure-javascript/
        function Binding(b) {
            _this = this
            this.elementBindings = []
            this.value = b.object[b.property]
            this.valueGetter = function(){
                return _this.value;
            }
            this.valueSetter = function(val){
                _this.value = val
                for (var i = 0; i < _this.elementBindings.length; i++) {
                    var binding=_this.elementBindings[i]
                    binding.element[binding.attribute] = val
                }
            }
            this.addBinding = function(element, attribute, event){
                var binding = {
                    element: element,
                    attribute: attribute
                }
                if (event){
                    element.addEventListener(event, function(event){
                        _this.valueSetter(element[attribute]);
                    })
                    binding.event = event
                }       
                this.elementBindings.push(binding)
                element[attribute] = _this.value
                return _this
            }
    
            Object.defineProperty(b.object, b.property, {
                get: this.valueGetter,
                set: this.valueSetter
            }); 
    
            b.object[b.property] = this.value;
        }
    
        //https://www.wintellect.com/how-to-implement-the-observer-pattern-with-objects-and-arrays-in-pure-javascript/
        function Observer(o, property) {
            var _this = this;
            var value = o[property];
            this.observers = [];
            
            this.Observe = function (notifyCallback){
                _this.observers.push(notifyCallback);
            }
    
            Object.defineProperty(o, property, {
                set: function(val){
                    _this.value = val;
                    for(var i = 0; i < _this.observers.length; i++) _this.observers[i](val);
                },
                get: function(){
                    return _this.value;
                }
            });
        }
        function ArrayObserver(a) {
            var _this = this;
            this.array = a;   
            this.observers = [];
    
            this.Observe = function (notifyCallback){
                _this.observers.push(notifyCallback);
            }    
    
            a.push = function(obj){
                var push = Array.prototype.push.apply(a, arguments);        
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "push");
                return push;
            }
    
            a.pop = function(){
                var popped = Array.prototype.pop.apply(a, arguments);        
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](popped, "pop");
                return popped;
            }
    
            a.reverse = function() {
                var result = Array.prototype.reverse.apply(a, arguments);
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](result, "reverse");
                return result;
            };
    
            a.shift = function() {
                var deleted_item = Array.prototype.shift.apply(a, arguments);
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](deleted_item, "shift");
                return deleted_item;                        
            };
    
            a.sort = function() {
                var result = Array.prototype.sort.apply(a, arguments);
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](result, "sort");
                return result;
            };
    
            a.splice = function(i, length, itemsToInsert) {
                var returnObj
                if(itemsToInsert){
                    Array.prototype.slice.call(arguments, 2);
                    returnObj = itemsToInsert;
                }
                else{
                    returnObj = Array.prototype.splice.apply(a, arguments);
                }
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](returnObj, "splice");
                return returnObj;
            };
    
            a.unshift = function() {
                var new_length = Array.prototype.unshift.apply(a, arguments);
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](new_length, "unshift");
                return arguments;
            };
                        
        }
        function MapObserver(m) {
            var _this = this;
            this.map = m;
            this.observers = [];
    
            this.Observe = function (notifyCallback){
                _this.observers.push(notifyCallback);
            }
    
            m.set = function(obj){
                var set = Map.prototype.set.apply(m, arguments);        
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "set");
                return set;
            }
    
            m.clear = function(obj){
                var clear = Map.prototype.clear.apply(m);        
                for(var i = 0; i < _this.observers.length; i++) _this.observers[i](obj, "clear");
                return clear;
            }
        }
    
        function secondsToTime(seconds){
            // let hr  = Math.floor(seconds / 3600);
            let sec = Math.floor(seconds);
            sec = Math.floor( sec % 60 );
            sec = sec >= 10 ? sec : '0' + sec;
    
            let min = Math.floor(seconds / 60);
            min = min >= 10 ? min : '0' + min;
    
            return min + ":" + sec;
        }
    </script>
</head>
<header>
    <h1><abbr>Trnscrbr</abbr> - A Transcription Viewer</h1>
    <!-- <hr /> -->
    <!-- <template>
        <h1>Hello Trnscrbr!</h1>
    </template>
    <my-component></my-component> -->
</header>
<body id="body">
    <!-- <div id="page" class="page">
        <div data-disclosure="A generated button">
            <p data-disclosure-content>
                This content will turn into a disclosure
                once the script runs.
            </p>
        </div>

        <div id="ex" data-disclosure data-disclosure-type="block">
            <span data-disclosure-btn>
            A full width "button"
            </span>
            <div data-disclosure-content>
            <p>
                Allows for a large hit area for the disclosure widget's
                trigger.
            </p>
            <p>
                <a href="#!">
                This link is here just for focus testing.
                </a>
            </p>
            </div>
        </div>

        <div id="ex2" data-disclosure data-disclosure-type="block" data-disclosure-open data-disclosure-class="test-class">
            <h4>
            <button data-disclosure-btn>
                Disclosure button within a heading
            </button>
            </h4>
            <div data-disclosure-content>
            <p>
                This disclosure widget is opened by default. Because that's a thing that should be able to happen.
            </p>

            <p>
                Here's an example of a nested flyout disclosure widget:

                <span data-disclosure="I'm a flyout!" data-disclosure-type="flyout">
                <span data-disclosure-content>
                    This example has a <a href="#">link within it</a>. Flyouts can
                    be closed via the <kbd>ESC</kbd> key, as long as focus is on the <code>button</code> or within the revealed content.
                    <br>
                    Flyouts will auto-close if focus leaves the flyout.
                </span>
                </span>

                All of this is contained within a single paragraph.
            </p>

            <p>
                Here's an example of yet another flyout disclosure widget because testing:

                <span data-disclosure="I'm another flyout!" data-disclosure-hover data-disclosure-type="flyout">
                <span data-disclosure-content>
                    This one doesn't have a link in it.
                </span>
                </span>

                All of this is contained within a single paragraph.
            </p>
            </div>
        </div>

        <section>
            <p>
                This example showcases how a disclosure widget can be used to create
                an off-site navigation. Using the <code>data-disclosure-manual-classes</code> to
                not add any of the default classes to the widget, and to instead use totally custom
                classes for the component.
            </p>

            <nav aria-label="example" id="my_nav" data-disclosure-type="flyout" data-disclosure data-disclosure-manual-classes>
                <button data-disclosure-btn hidden>Menu</button>

                <div data-disclosure-content>
                    <ul>
                        <li><a href="#">Link 1</a></li>
                        <li><a href="#">Link 2</a></li>
                        <li><a href="#">Link 3</a></li>
                    </ul>
                </div>
            </nav>

            <p>
                <a href="#">Focusable element after the navigation</a>.
            </p>
        </section>
    </div> -->

    <main class="page" aria-label="Transcript Workspace">
        <section id="transcriptSection" class="transcript">
            <h1>Transcript <button id="clearTranscripts" name="Clear" class="simptip-info simptip-multiline simptip-position-top" data-tooltip="Reset and clear loaded transcript data." onclick="handleClearTranscripts(event)">Clear</button></h1>
            <hr />
            <label for="transcriptFileSource" class="simptip-info simptip-multiline simptip-position-top" data-tooltip="Click to select and load the transcript file">
                Select the transcript file
                <div id="transcriptFileName" class="file-name">No file selected</div>
            </label>
            <input id="transcriptFileSource" name="transcriptFileSource" class="file-input hidden" type="file" accept=".json, text/json" />
            <error-msngr></error-msngr>
            <hr />
            <div class="workspaceContainer">
                <div id="segmentedTranscriptContainer" class="segmented"></div>
            </div>
            <!-- <div id="scrollOutput"></div> -->
            <hr />
            <details>
                <summary>Full transcript</summary>
                <div id="rawTranscriptContainer" class="raw"></div>
            </details>
        </section>
        <section id="mediaSection" class="mediaPlayer aside">
            <h1>Media</h1>
            <hr />
            <figure id="mediaContainer">
                <figcaption>
                    <label for="mediaFileSource" class="simptip-info simptip-multiline simptip-position-top" data-tooltip="Click to select and load the media file">
                        <p>Select the media file</p>
                        <div id="mediaFileName" class="file-name">No File</div>
                    </label>
                    <input id="mediaFileSource" class="file-input hidden" type="file" name="mediaFileSource" />
                </figcaption>
                <!-- https://developer.mozilla.org/en-US/docs/Web/Guide/Audio_and_video_delivery/Video_player_styling_basics -->
                <video id="mediaPlayer" width="100%" preload="metadata" controls
                        ontimeupdate="handleMediaTimeUpdated(event)" 
                        onplay="handleMediaPlay(event)" 
                        onended="handleMediaEnded(event)" 
                        onseeked="handleMediaSeeked(event)">
                    Your browser does not support the <code>video</code>/<code>audio</code> element.
                </video>
                <!-- <div id="video-controls" class="controls" data-state="hidden">
                    <button id="playpause" type="button" data-state="play">Play/Pause</button>
                    <button id="stop" type="button" data-state="stop">Stop</button>
                    <div class="progress">
                        <progress id="progress" value="0" min="0">
                            <span id="progress-bar"></span>
                        </progress>
                    </div>
                    <button id="mute" type="button" data-state="mute">Mute/Unmute</button>
                    <button id="volinc" type="button" data-state="volup">Vol+</button>
                    <button id="voldec" type="button" data-state="voldown">Vol-</button>
                    <button id="fs" type="button" data-state="go-fullscreen">Fullscreen</button>
                </div> -->
                <figcaption>
                    &copy;  | <a href=""></a>
                </figcaption>
            </figure>
            <hr />
        </section>
        <section id="transcriptInfo" class="info aside">
            <details class="info aside">
                <summary class="simptip-info simptip-multiline simptip-position-top" data-tooltip="Select to see details about the transcript file">Transcript Information</summary>
                <hr />
                <div id="infoTranscriptContainer" class="info"></div>
            </details>
            <hr />
            <details id="speakersContainer" open class="speakers aside">
                <summary class="simptip-info simptip-multiline simptip-position-top" data-tooltip="Select to see speakers identified in the transcript">Speakers</summary>
                <hr />
                <ul>
                </ul>
            </details>
            <hr />
        </section>
    </main>

    <script src="js/plugins.js"></script>
    <script src="js/aria.disclosure.js"></script>
    <!-- <script src="js/events.mjs" type="module"></script> -->
    <!-- <script src="js/errormsngr.mjs" type="module"></script> -->
    <!-- <script src="js/video-player.js"></script> -->
    <script src="js/main.js"></script>
  
    <!-- Events.mjs -->
    <script type="text/javascript">
        const EVENT_DISPLAY_ERROR_MESSAGE = "display-errormessage";

        function dispatchDisplayErrorMessage(message) {
            window.dispatchEvent(
                new CustomEvent(EVENT_DISPLAY_ERROR_MESSAGE, {
                    detail: message,
                })
            );
        }

        function listenForDisplayErrorMessage(fn) {
            window.addEventListener(EVENT_DISPLAY_ERROR_MESSAGE, fn);
        }

        function removeDisplayErrorMessageListener(fn) {
            window.removeEventListener(EVENT_DISPLAY_ERROR_MESSAGE, fn);
        }
    </script>

    <!-- ErrorMsngR.mjs -->
    <script type="text/javascript">
        class ErrorMsngR extends HTMLElement {
            constructor() {
                super();
            }

            connectedCallback() {
                // this.classList.add("Trnscrbr-ErrorContainer");
                listenForDisplayErrorMessage(this._display.bind(this));
            }

            disconnectedCallback() {
                removeDisplayErrorMessageListener(this._display.bind(this));
            }

            /******************************************************************************
             * Private methods
             *****************************************************************************/

            _display(e) {
                const message = e.detail;

                let div = document.createElement("div");
                div.innerText = message;
                div.classList.add("Trnscrbr-ErrorContainer");
                
                this.insertAdjacentElement("beforeend", div);

                setTimeout(() => {
                    this.removeChild(div);
                }, 3000);
            }
        }

        customElements.define("error-msngr", ErrorMsngR);    
    </script>
</body>

<!-- Disclosure demo https://github.com/scottaohara/aria_disclosure_widget -->
<!-- <script type="text/javascript" defer>
    var disclosure = '[data-disclosure]';
    var els = document.querySelectorAll(disclosure);

    // Generate all tab instances
    for ( var i = 0; i < els.length; i++ ) {
      var dis = new A11Ydisclosure( els[i] );
    }

    // navigation example specific:
    var body = document.getElementById('body');
    var nav = document.getElementById('my_nav');
    var navBtn = nav.querySelector('button');
    var navBar = nav.querySelector('[data-disclosure-content]');
    var expandedClass = 'nav-expanded';

    navBtn.addEventListener('click', function () {
      if ( body.classList.contains(expandedClass) ) {
        closeNav();
      }
      else {
        openNav()
      }
    });

    var openNav = function () {
      body.classList.add(expandedClass);
      document.addEventListener('click', docClick, false);
    }

    var closeNav = function () {
      body.classList.remove(expandedClass);
    }
</script> -->

<script type="text/javascript" defer>
    // Whole-script strict mode syntax
    'use strict';

    document.getElementById('mediaFileSource').addEventListener('change', handleMediaFileSelect, false);
    document.getElementById('transcriptFileSource').addEventListener('change', handleJsonFileSelect, false);
    // document.getElementById('mediaPlayer').addEventListener('play', handlePlay, false);

    const nbsp = document.createTextNode("\u00A0");
    const meatballs = document.createElement("button");
    meatballs.textContent = "\u2026"; //&#8230; &#x2026; &hellip;
    meatballs.classList.add("toolButton");
    const kebab = document.createElement("button");
    kebab.textContent = "\u22EE"; //&#8942; &#x22EE; &vellip;
    kebab.classList.add("toolButton");
    // const hamburger = document.createTextNode("&#8801; &#x2261; &equiv;");

    const mediaPlayer = document.getElementById('mediaPlayer');
    // mediaPlayer.muted = true;

    var transcriptData;
    var speakersList = document.querySelector('#speakersContainer>ul');
    var speakers = new Map();
    // var speakersObserver = new ArrayObserver(Array.from(speakers, (v, k) => k));
    var speakersObserver = new MapObserver(speakers);
    speakersObserver.Observe(function(result, method){
        switch (method) {
            case 'set':
                let speaker = speakers.get(result);
                let speakersListItem = speakersList.querySelector(`#speaker_${result}`);
                let speakerIndex = Array.from(speakers.keys()).indexOf(speaker.speakerName)+1;

                if(!speakersListItem) {
                    speakersListItem = document.createElement('li');
                    speakersListItem.classList.add(`speaker-${speakerIndex}`);
                    
                    let speakerElementLabel = speakersListItem.appendChild(document.createElement('label'));
                    speakerElementLabel.htmlFor = result;
                    speakerElementLabel.innerText = "Speaker Name";
                    speakerElementLabel.classList.add("hidden");
                    speakerElementLabel.classList.add("simptip-info");
                    speakerElementLabel.classList.add("simptip-position-top");
                    speakerElementLabel.dataset.tooltip = "Update speaker name";
                    
                    let speakerElement = speakersListItem.appendChild(document.createElement('input'));
                    speakerElement.id = "speaker_" + result;
                    speakerElement.type = "text"
                    speakerElement.classList.add(`speaker-${speakerIndex}`)
                    speakerElement.value = speaker.speakerName;
                    // speakerElement.onclick = handleSpeakerSelected;
                    speakerElement.onchange = e => speaker.speakerName = e.target.value;
                    
                    speaker.getSpeakerObserver().Observe(newValue => {
                        let speakerSectionLabels = document.querySelectorAll(`dfn[data-speaker=${result}]`);
                        speakerSectionLabels.forEach(element => {
                            element.innerText = newValue;
                        });
                    });

                    let speakerSegmentsList = speakersListItem.appendChild(document.createElement('details')).appendChild(document.createElement('ol'));
                    speaker.segments.forEach(segment => {
                        speakerSegmentsList.appendChild(document.createElement('li')).innerText = `${secondsToTime(segment.start_time)}-${secondsToTime(segment.end_time)}`;
                    });

                    speakersList.appendChild(speakersListItem);
                } else {
                    let speakerSegmentsList = speakersListItem.parentNode.querySelector('ol');
                    // let speakerItems = speaker.segments.reduce((p, c) => {
                    //     if(p) {
                    //         p.end_time = c.end_time;
                    //         p.items.join(c.items);
                    //     }
                    // });
                    let segment = speaker.segments[speaker.segments.length-1];
                    speakerSegmentsList.appendChild(document.createElement('li')).innerText = `${secondsToTime(segment.start_time)}-${secondsToTime(segment.end_time)}`;
                }
                break;
            case 'clear':
                speakersList.innerHTML = '';
                break;
            default:
                break;
        }
    });
    var startTimes;
    var lastStartTime;
    var currentDialogue;
    var previousDialogue;

    const transcriptInfo = document.getElementById('infoTranscriptContainer');
    const transcriptWrapper = document.getElementById('segmentedTranscriptContainer');
    transcriptWrapper.addEventListener('speaking', handleSpeaking, false);
    const transcriptWrapperOffSetTop = transcriptWrapper.offsetTop;
    // transcriptWrapper.addEventListener("scroll", event => scrollOutput.textContent = `scrollTop: ${transcriptWrapper.scrollTop}`);

    function handleMediaFileSelect(evt) {
        var files = evt.target.files;

        for (var i = 0, f; f = files[i]; i++) {

            // Only process audio files.
            if (!f.type.match('audio.*')) {
                alert('Must be an audio file');
                return;
            };

            // Warn user if file size is larger than 50mb
            let fileSize = Math.round(files[0].size / 1000000)
            if (fileSize > 50.457280) {
                alert('This media file is ' + fileSize + 'mb. There may be playback issues above 50mb. For ways to reduce file size see the docs: https://github.com/smlum/scription#uploading-large-audio-files-to-scription');
                // TODO use Bulma modal instead of alert
                // $('.modal-audio-size'){}
                // return;
            }

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    document.getElementById('mediaPlayer').src = e.target.result;
                    console.log("loading media: " + theFile.name);
                    document.getElementById('mediaFileName').innerHTML = theFile.name;
                };
            })(f);

            reader.readAsDataURL(f);
        }
    }

    function handleJsonFileSelect(evt) {
        const files = evt.target.files;
        for (let i = 0, f; f = files[i]; i++) {
            let reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    console.log(`loading json: ${theFile.name}`);

                    let transcriptFileName = document.getElementById('transcriptFileName');
                    if(transcriptFileName.firstChild?.nodeType === transcriptFileName.TEXT_NODE) transcriptFileName.removeChild(transcriptFileName.firstChild);
                    transcriptFileName.appendChild(document.createElement('li')).textContent = theFile.name;
                    
                    transcriptData = JSON.parse(e.target.result);
                    
                    displayTranscriptResults(transcriptData.results);

                    startTimes = transcriptData.results.items.filter(o => o.type !== 'punctuation').map(o => Number(o.start_time));
                };
            })(f);

            reader.readAsText(f);
        }
    }
    
    function displayTranscriptResults(transcriptResults) {
        const speakerLabels = transcriptResults.speaker_labels;
        
        populateTranscriptInfo(transcriptInfo, transcriptData.jobName, transcriptResults, speakerLabels);

        populateRawTranscripts(transcriptResults.transcripts);

        const items = buildTranscriptItems(transcriptResults.items);

        populateTranscriptSegments(speakerLabels.segments, speakers, items);
    }

    function populateTranscriptInfo(infoContainer, jobName, transcriptResults, speakerLabels) {
        infoContainer.appendChild(document.createElement('li')).textContent = `Job Name: ${jobName}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Language: ${transcriptResults.language_code}`;
        let languagesInfo = infoContainer.appendChild(document.createElement('li'));
        languagesInfo.textContent = `Languages detected:`;
        let languagesInfoList = languagesInfo.appendChild(document.createElement('ol'));
        transcriptResults.language_identification.forEach(o => languagesInfoList.appendChild(document.createElement('li')).textContent = `${o.code} (${o.score})`);
        infoContainer.appendChild(document.createElement('li')).textContent = `Number of speakers: ${speakerLabels.speakers}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Number of segments: ${speakerLabels.segments.length}`;
        infoContainer.appendChild(document.createElement('li')).textContent = `Estimated number of words: ${transcriptResults.items.filter(o => o.type !== 'punctuation').length}`;
    }

    function populateRawTranscripts(transcripts) {
        const rawTranscriptContainer = document.getElementById('rawTranscriptContainer');
        transcripts.forEach(transcriptItem => {
            rawTranscriptContainer.appendChild(document.createElement('p')).textContent = transcriptItem.transcript;
        });
    }

    function buildTranscriptItems(transcriptItems) {
        var lastEndTime;
        var lastStartTime;

        return transcriptItems.map(item => {
            let startTime = item.start_time ? Math.round(lastStartTime = item.start_time * 1000) : lastStartTime;
            let endTime = item.end_time ? Math.round(lastEndTime = item.end_time * 1000) : lastEndTime;

            let itemContainer = document.createElement('span');
            if(item.type !== 'punctuation') {
                itemContainer.id = 'segment_item_' + startTime;
                itemContainer.dataset.duration_ms = Math.round(endTime - startTime);
                itemContainer.classList.add('dialogue');
            }
            itemContainer.dataset.type = item.type;
            itemContainer.dataset.start_time = startTime;
            itemContainer.dataset.end_time = endTime;
            itemContainer.dataset.confidence = item.alternatives[0].confidence;
            itemContainer.innerText = item.alternatives[0].content;
            itemContainer.onclick = handleWordSelected;

            return itemContainer;
        });
    }

    function populateTranscriptSegments(transcriptSegments, transcriptSpeakers, transcriptItems) {
        const segmentsContainer = document.getElementById('segmentedTranscriptContainer');

        transcriptSegments.forEach((segment, index) => {
            if(!transcriptSpeakers.has(segment.speaker_label)){
                let speaker = { 
                    speakerName: segment.speaker_label, 
                    segments: [segment], 
                    _speakerObserver: null,
                    getSpeakerObserver: function() {
                        if(!this._speakerObserver) this._speakerObserver = new Observer(this, "speakerName");

                        return this._speakerObserver;
                    }
                };

                transcriptSpeakers.set(segment.speaker_label, speaker);
            } else {
                let speaker = transcriptSpeakers.get(segment.speaker_label);
                speaker.segments.push(segment);
                transcriptSpeakers.set(segment.speaker_label, speaker);
            }

            let speakerIndex = Array.from(transcriptSpeakers.keys()).indexOf(segment.speaker_label)+1;
            let segmentStartTime = Math.round(segment.start_time * 1000);
            let segmentEndTime = Math.round(segment.end_time * 1000);

            let segmentContainer = document.createElement('p');

            let segmentEditTool = segmentContainer.appendChild(kebab.cloneNode(true));
            segmentEditTool.classList.add("simptip-info");
            segmentEditTool.classList.add("simptip-position-right");
            segmentEditTool.dataset.bind = `transcriptResults.speaker_labels.segments[${index}].speaker_label`;
            segmentEditTool.dataset.tooltip= "Click to edit";
            segmentEditTool.onclick = handleSegmentLabelClick;

            let segmentLabelContainer = segmentContainer.appendChild(document.createElement('span'));
            segmentLabelContainer.classList.add(`segmentLabel`);
            segmentLabelContainer.classList.add(`speaker-${speakerIndex}`);
            segmentLabelContainer.dataset.bind = `transcriptResults.speaker_labels.segments[${index}].speaker_label`;
            segmentLabelContainer.onclick = handleSegmentLabelClick;
            segmentLabelContainer.innerHTML = `<dfn id="${segment.speaker_label}_segment_${index}" data-speaker="${segment.speaker_label}">${segment.speaker_label}</dfn> (<time>${secondsToTime(segment.start_time)}</time> - <time>${secondsToTime(segment.end_time)}</time>):`;

            let segmentItemsContainer = segmentContainer.appendChild(document.createElement('q'));
            let segmentItems = transcriptItems.filter(item => item.dataset.start_time >= segmentStartTime && item.dataset.end_time <= segmentEndTime);
            segmentItems.forEach(segmentItem => {
                if(segmentItem.dataset.type !== 'punctuation') segmentItemsContainer.appendChild(document.createTextNode(' '));
                else segmentItem.classList.add('punctuation');
                segmentItemsContainer.appendChild(segmentItem);
            });

            segmentsContainer.appendChild(segmentContainer);
        });
    }

    function handleMediaPlay(e) {
        if(!transcriptData) {
            e.preventDefault();

            console.error("No transcript loaded! There are no transcript file loaded.");
            
            alert("No transcript loaded! Load a AWS transcript json file ");

            return e.returnValue = false;
        }
    }

    function handleMediaEnded(e) {
        previousDialogue?.classList.remove('speaking');
        previousDialogue?.classList.add('spoke');
        currentDialogue?.classList.remove('speaking');
        currentDialogue?.classList.add('spoke');
    }

    function handleMediaSeeked(e) {
        if(!transcriptData) return;

        transcriptWrapper.querySelectorAll('span.dialog').forEach(o => {
            o.classList.remove('speaking');
            // o.classList.remove('spoke');
        });

        let currentTime = e.target.currentTime;
        let previousStartTime = currentTime;
        startTimes = transcriptData.results.items
            .filter(o => {
                let isNotPuctuation = o.type !== 'punctuation';
                let mustInclude = o.start_time >= currentTime;
                if(!mustInclude && isNotPuctuation) previousStartTime = Number(o.start_time);
                return mustInclude && isNotPuctuation;
            })
            .map(o => Number(o.start_time));
        if(previousStartTime === 0) {
            transcriptWrapper.scrollTop = 0;
            return;
        }
        else if(e.target.ended) return;

        if(previousStartTime < startTimes[0]) startTimes.unshift(previousStartTime);

        transcriptWrapper.dispatchEvent(new CustomEvent('speaking', { detail: currentTime }));
    }

    function handleMediaTimeUpdated(e) {
        if(!transcriptData || e.target.paused) return;

        transcriptWrapper.dispatchEvent(new CustomEvent('speaking', { detail: e.target.currentTime }));
    }

    function handleSpeaking(e) {
        let currentTime = Number(Number(e.detail).toFixed(2));
        let startTime = Number(Number(startTimes[0]).toFixed(2));

        // console.log(`${currentTime} | ${startTime}`);

        if(currentTime > startTime){
            lastStartTime = startTimes.shift();
            startTime = Number(Number(startTimes[0]).toFixed(2));
            previousDialogue = currentDialogue;
        } 
        else return;

        if(lastStartTime > currentTime) return;

        currentDialogue = transcriptWrapper.querySelector(`#segment_item_${Math.round(startTime * 1000)}`);
        if(currentDialogue) {
            currentDialogue.classList.remove('spoke');
            currentDialogue.classList.add('speaking');
            previousDialogue?.classList.remove('speaking');
            previousDialogue?.classList.add('spoke');
            
            transcriptWrapper.scrollTop = currentDialogue.offsetTop - transcriptWrapperOffSetTop-60;
        }

        // console.log(`${lastStartTime} | ${startTime} (${Math.round(startTime * 1000)}) | ${currentDialogue?.textContent}`);
    }

    function handleClearTranscripts(e) {
        transcriptData = null;
        if(speakers) speakers.clear();
        startTimes = [];
        lastStartTime = null;
        currentDialogue = null;
        previousDialogue = null;
        document.getElementById('transcriptFileSource').value = null;
        document.getElementById('infoTranscriptContainer').innerHTML = "";
        document.getElementById('segmentedTranscriptContainer').innerHTML = "";
        document.getElementById('rawTranscriptContainer').innerHTML = "";
        document.querySelectorAll('#transcriptFileName>li').forEach(o => o.parentNode.removeChild(o));
    }

    function handleSegmentLabelClick(e) {
        _displayError(`Show Model: ${e.target.dataset.bind}`);
        // alert(`Show Model: ${e.target.dataset.bind}`);
    }

    function handleWordSelected(e) {
        previousDialogue = null;
        lastStartTime = null;
        mediaPlayer.currentTime = e.target.dataset.start_time/1000;
    }

    function handleSpeakerSelected(e) {
        alert(`Show Model: ${e.target.id}`);
    }
    
    function _displayError(message) {
        dispatchDisplayErrorMessage(message);
    }
</script>

</html>