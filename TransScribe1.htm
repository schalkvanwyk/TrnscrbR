<html>

<head>
    <style>
        #transcript>li {
            /*
background-color: coral;
  -webkit-filter: blur(3px);
  filter: blur(3px);
  transition: all .8s ease;
*/
        }

        .speaking {
            background-color: yellow;
            /*
  -webkit-filter: blur(0px);
  filter:blur(0px);
*/
        }
    </style>
</head>

<body>
    <audio id="audio" controls ontimeupdate="playTranscript()">
        <!--  -->
        <source src="VOXTAB_legal_audio.mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    <div id="transcriptWrapper">
        <ul id="transcript">
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker2"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker2"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker2"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker2"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: What I am trying to say is that the appeal
                and the settlement are separate.</li>
            <li class="speaker2"><strong class="speakerName">Alistair</strong>: You mean that communications and
                announcements internal and external would be brought into the appeal process.</li>
            <li class="speaker1"><strong class="speakerName">Justin</strong>: Right, because they connect to the appeal.
            </li>
        </ul>
    </div>
    <script>
        let dialogueTimings = [0, 4, 9, 11, 18, 24, 29, 31, 44, 45, 47];
        let dialogues = document.querySelectorAll('#transcript>li');
        let transcriptWrapper = document.querySelector('#transcriptWrapper');

        let audio = document.querySelector('#audio');
        let previousDialogueTime = -1;
        audio.muted = true;

        if (getComputedStyle(dialogues[0]).webkitFilter === undefined && getComputedStyle(dialogues[0]).filter === "none") {
            var headEle = document.querySelector('head'),
                linkEle = document.createElement('link');
            linkEle.type = 'text/css';
            linkEle.rel = 'stylesheet';
            linkEle.href = 'ie.css';
            headEle.appendChild(linkEle);
        }

        /*
        for(var i = 0;i<dialogueTimings[10];i++){
        console.log(i);
        audio.currentTime = i;
        playTranscript();
        }
        */

        function playTranscript() {
            let currentDialogueTime = Math.max.apply(Math, dialogueTimings.filter(function (v) { return v <= audio.currentTime }));

            if (previousDialogueTime !== currentDialogueTime) {
                previousDialogueTime = currentDialogueTime;
                var currentDialogue = dialogues[dialogueTimings.indexOf(currentDialogueTime)];
                transcriptWrapper.scrollTop = currentDialogue.offsetTop - 50;
                var previousDialogue = document.getElementsByClassName('speaking')[0];
                if (previousDialogue !== undefined) {
                    //previousDialogue.className = previousDialogue.className.replace('speaking','');
                    previousDialogue.classList.remove('speaking');
                    var br = document.createElement('p');
                    previousDialogue.appendChild(br);
                }
                //currentDialogue.className +=' speaking';
                currentDialogue.classList.add('speaking');
            }
        }
    </script>
</body>

</html>